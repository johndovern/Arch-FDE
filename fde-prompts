#!/bin/bash


function system_prompts() {

  # ERASEALL prompt
  while [[ -z "$ERASEALL" ]] || [[ ! "$ERASEALL" =~ ^[0-1]$ ]]; do
    clear
    echo -e "${RED}\
This script will erase all the data on the install target${END}
Currently this script is not robust enough to support anything
but installing to a blank drive
0  :  Do not proceed, I don't want to erase anything
1  :  Yes, I want to erase the contents of my device"
    read -rp "Proceed? " ERASEALL
    export ERASEALL
  done

  if [[ "$ERASEALL" -eq 0 ]]; then return 1 ; fi

  # Setting some vars
  if [ -d /sys/firmware/efi ]; then
    export ISEFI=1
    export EFIPARTITION=1
    export CRYPTPARTITION=2
  else
    export ISEFI=0
    export CRYPTPARTITION=1
  fi

  # DEV prompt
  while [[ -z "$DEV" ]] || [[ ! -e "${DEV}" ]] || ! echo "${DEV}" | grep -q -v "[0-9]$" ; do
    clear
    lsblk
    echo -e "${GREEN}\
Please choose a target for installation${END}
i.e. ${GREEN}/dev/sda${END} and not ${RED}/dev/sda1${END}"
    read -rp "Use dev: " DEV
    export DEV
  done

  # CRYPTNAME prompt
  while [[ -z "$CRYPTNAME" ]] ; do
    clear
    echo -e "${GREEN}Please choose a sane name for your encrypted drive i.e. arch-crypt${END}"
    read -rp "Crypt name: " CRYPTNAME
    export CRYPTNAME
  done

  # VGNAME prompt
  while [[ -z "$VGNAME" ]] || echo "${VGNAME}" | grep -q "-" -i ; do
    clear
    echo -e "${GREEN}\
Please choose a volume group name${END}
Cannot contain a \"${RED}-${END}\""
    read -rp "Volume group name: " VGNAME
    export VGNAME
  done

  # LVROOTNAME prompt
  while [[ -z "$LVROOTNAME" ]] || echo "${LVROOTNAME}" | grep -q "-" -i ; do
    clear
    echo -e "${GREEN}\
Please choose a root name${END}
Cannot contain a \"${RED}-${END}\""
    read -rp "Root name: " LVROOTNAME
    export LVROOTNAME
  done

  # LVROOTSIZE prompt
  while [[ -z "$LVROOTSIZE" ]] || ! echo "${LVROOTSIZE}" | grep -E '^[0-9].*[G|T]$' | grep -q -v " \|+\|%\|-" ; do
    clear
    echo -e "${GREEN}\
Please specify the size of your root volume i.e. 10G${END}
Cannot contain a \"${RED}+${END}\"
Must end with a \"${RED}G${END}\", or \"${RED}T${END}\""
    read -rp "Root size: " LVROOTSIZE
    export LVROOTSIZE
  done

  # LVSWAPNAME prompt
  while [[ -z "$LVSWAPNAME" ]] || echo "${LVSWAPNAME}" | grep -q "-" -i ; do
    clear
    echo -e "${GREEN}\
Please choose a swap name${END}
Cannot contain \"${RED}-${END}\""
    read -rp "Swap name: " LVSWAPNAME
    export LVSWAPNAME
  done

  # LVSWAPSIZE prompt
  while [[ -z "$LVSWAPSIZE" ]] || ! echo "${LVSWAPSIZE}" | grep -E '^[0-9].*[M|G]$' | grep -q -v " \|+\|%\|-" ; do
    clear
    echo -e "${GREEN}\
Please specify the size of your swap volume i.e. 2G${END}
Cannot contain a \"${RED}+${END}\"
Must end with an \"${RED}M${END}\", or \"${RED}G${END}\""
    read -rp "Swap size: " LVSWAPSIZE
    export LVSWAPSIZE
  done

  # LVHOMENAME prompt
  while [[ -z "$LVHOMENAME" ]] || echo "${LVHOMENAME}" | grep -q "-" -i ; do
    clear
    echo -e "${GREEN}\
Please choose a home name${END}
Cannot contain \"${RED}-${END}\""
    read -rp "Home name: " LVHOMENAME
    export LVHOMENAME
  done

  # LVHOMESIZE prompt
  while [[ -z "$LVHOMESIZE" ]] || ! echo "${LVHOMESIZE}" | grep -E '^100$|^[1-9][0-9]$|^[1-9]$' ; do
    clear
    echo -e "${GREEN}\
Please specify the size of your home volume between 1 and 100${END}
enter 100 to use 100% of the remaining storage on ${DEV}${CRYPTPARTITION}
Do not include the \"${RED}%${END}\""
    read -rp "Home size: " LVHOMESIZE
    export LVHOMESIZE
  done

  # EFISIZE prompt
  if [[ "$ISEFI" -eq 1 ]]; then
    while [[ -z "$EFISIZE" ]] || ! echo "${EFISIZE}" | grep -E '^[0-9].*[M|G]$' | grep -q -v " \|+\|^0[M\|G]$" ; do
      clear
      echo -e "${GREEN}\
Please specify the size of your EFI partition${END}
Cannot contain a \"${RED}+${END}\"
Must end with an \"${RED}M${END}\", or \"${RED}G${END}\""
      read -rp "EFI size: " EFISIZE
      export EFISIZE
    done
  fi

  # TARGETMOUNTPOINT prompt
  while [[ -z "$TARGETMOUNTPOINT" ]] || ! echo "${TARGETMOUNTPOINT}" | grep -q "^/" || grep -sq " ${TARGETMOUNTPOINT}" /proc/mounts ; do
    clear
      if [[ -n "$TARGETMOUNTPOINT" ]] && grep -sq " ${TARGETMOUNTPOINT}" /proc/mounts ; then
        echo -e "${RED}The given location is occupied. Please select a free mount point.${END}"
      fi
    echo -e "${GREEN}\
Please specify a mount point for /dev/${VGNAME}/${LVROOTNAME}${END}
If the directory does not exist, it will be created"
    read -rp "Target mount point: " TARGETMOUNTPOINT
    export TARGETMOUNTPOINT
  done

  # if [[ ! -d "$TARGETMOUNTPOINT" ]]; then mkdir -p "${TARGETMOUNTPOINT}" ; fi

  # NEWHOSTNAME prompt
  while [[ -z "$NEWHOSTNAME" ]] ; do
    clear
    echo -e "${GREEN}\
Please specify the hostname of the new system${END}
Enter something sane, there are no major checks for this"
    read -rp "New hostname: " NEWHOSTNAME
    export NEWHOSTNAME
  done

  # ROOTPASS prompt
  while [[ -z "$ROOTPASS" ]] ; do
    clear
   echo -e "${GREEN}Please specify your root password for your new system${END}"
    read -sr ROOTPASS
    export ROOTPASS
    echo -e "${GREEN}Type password again${END}"
    read -sr ROOTPASS_C
    export ROOTPASS_C
    while [[ "${ROOTPASS}" != "${ROOTPASS_C}" ]]; do
      clear
      echo -e "${RED}Passphrases did not match, try again${END}"
      read -sr ROOTPASS
      export ROOTPASS
      echo -e "${GREEN}Type passprhase again${END}"
      read -sr ROOTPASS_C
      export ROOTPASS_C
    done
  done

  # SSDGRUB prompt
  while [[ -z "$WANTSSDGRUB" ]] || [[ ! "$WANTSSDGRUB" =~ ^[0-1]$ ]] && lsblk --discard "${DEV}" | grep -q "[1-9]" ; do
    clear
    echo -e "${RED}\
*****  PLEASE MAKE SURE YOU UNDERSTAND THE  *****
*****  PROS AND CONS OF ENABLING DISCARDS   *****${END}
${GREEN}${DEV} supports TRIM, do you want to enable discards?${END}
0  :  do not enable discards
1  :  enable discards"
    read -rp "Enable discards? " WANTSSDGRUB
    export WANTSSDGRUB
  done

  if [[ "${WANTSSDGRUB}" -eq 1 ]]; then
    export SSDGRUB=":allow-discards"
  else
    export SSDGRUB=""
  fi
}

function key_prompts() {
  # WANTKEY prompt
  while [[ ! "$WANTKEY" =~ ^[0-1]$ ]]; do
    clear
    echo -e "${GREEN}\
Would you like to use a keyfile on an external drive to unlock LUKS at boot?${END}
0  :  Do not create a keyfile
1  :  I want a keyfile and I have an external drive to put it on"
    read -rp "Add keyfile?: " WANTKEY
    export WANTKEY
  done

  # Key prompts if user wants a keyfile
  if [[ "$WANTKEY" -eq 0 ]]; then export KEYCHANGE=0 ; return 1 ; fi

  # KEYDEV prompt
  while [[ ! -e "${KEYDEV}" ]] || [[ -z "${KEYDEV}" ]] || echo "${KEYDEV}" | grep -q "${DEV}" || echo "${KEYDEV}" | grep -q -E "*[0-9]+$" ; do
    clear
    lsblk
    echo -e "${GREEN}\
Please choose a device to store your keyfile on${END}
i.e. /dev/sdb1
Choose an external drive and not ${DEV}"
    read -rp "Select device: " KEYDEV
    export KEYDEV
  done

  # KEYFORMAT prompt
    while [[ -z "$KEYFORMAT" ]] || [[ ! "$KEYFORMAT" =~ ^[0-4]$ ]]; do
      clear
      echo -e "${GREEN}\
Detected ${KEYDEV} filesystem as  :  $(lsblk -dno FSTYPE ${KEYDEV})${END}
Would you like to reformat to another filesystem?
0  :  Do not reformat ${KEYDEV}
*****  THE FOLLOWING WILL ERASE DATA ON ${KEYDEV}  *****
1  :  vfat
2  :  btrfs
3  :  ext4
4  :  xfs"
      read -rp "Format ${KEYDEV} ? " KEYFORMAT
      export KEYFORMAT
    done

    # Format Key based on selection
    if [[ "$KEYFORMAT" =~ ^[1-4]$ ]] ; then
      case "$KEYFORMAT" in
        "1") export KEYFSTYPE="vfat" ;;
        "2") export KEYFSTYPE="btrfs" ;;
        "3") export KEYFSTYPE="ext4" ;;
        "4") export KEYFSTYPE="xfs" ;;
        *) ;;
      esac
    fi

  # KEYNAME prompt
    while [[ -z "$KEYNAME" ]] || echo "${KEYNAME}" | grep -q "\.key" ; do
      clear
      echo -e "${GREEN}Please enter a reasonable name for your keyfile${END}\nDo not include the \"${RED}.key${END}\" extension in the name."
      read -rp "Keyname: " KEYNAME
      export KEYNAME
    done

  # KEYMOUNT prompt
    while [[ -z "$KEYMOUNT" ]] || grep -sq " ${KEYMOUNT}" /proc/mounts || ! echo "$KEYMOUNT" | grep -q "^/" || [[ "$TARGETMOUNTPOINT" == "$KEYMOUNT" ]] || echo "$KEYMOUNT" | grep -q "^${TARGETMOUNTPOINT}" ; do
      clear
      if [[ -n "$KEYMOUNT" ]] && grep -sq " ${KEYMOUNT}" /proc/mounts ; then
        echo -e "${RED}The given location is occupied. Please select a free mount point.${END}"
      fi
      echo -e "${GREEN}Please specify a location, starting at root${END} \"${RED}/${END}\" ${GREEN}to mount your keyfile.${END}
/dev/${VGNAME}/${LVROOTNAME} will be mounted at ${TARGETMOUNTPOINT}"
      read -rp "Mount at: " KEYMOUNT
      export KEYMOUNT
    done

  # KEYDIR prompt
    while [[ -z "$KEYDIR" ]] || ! echo "$KEYDIR" | grep -q "^/" ; do
      clear
      echo -e "${GREEN}Please specify a location on ${KEYDEV} to store your keyfile.${END}
If the location does not exist it will be created.
If ${KEYNAME}.key exists at this location then it will
be used to encrypt ${DEV}${CRYPTPARTITION}"
      read -rp "Keyfile directory: " KEYDIR
      export KEYDIR
    done

    export KEYPATH="${KEYDIR}/${KEYNAME}"
}

function system_var_check() {
  while : ; do
    clear
    echo -e "${GREEN}\
Please review your new system settings${END}
01 - Install device     :  ${DEV}
02 - Crypt name         :  ${CRYPTNAME}
03 - LVM Group name     :  ${VGNAME}
04 - LVM Root name      :  ${LVROOTNAME}
05 - LVM Root size      :  ${LVROOTSIZE}
06 - LVM Swap name      :  ${LVSWAPNAME}
07 - LVM Swap size      :  ${LVSWAPSIZE}
08 - LVM Home name      :  ${LVHOMENAME}
09 - LVM Home size (%)  :  ${LVHOMESIZE}
10 - Target mount       :  ${TARGETMOUNTPOINT}
11 - System Hostname    :  ${NEWHOSTNAME}"
    if [[ "${WANTSSDGRUB}" -eq 1 ]]; then
      echo -e "\
12 - Discards enabled  :  Yes"
    fi

    if [[ "${SYSCHANGE}" -ne 1 ]]; then
      read -rp "Do you wish to change any options? [y/N] " ans
      case "${ans}" in
        "n"|"N"|"") unset ans ; export SYSCHANGE=0 ; break ;;
        "y"|"Y") unset ans ; export SYSCHANGE=1 ; continue ;;
        *) unset ans ; continue ;;
      esac
    fi

    echo -e "${RED}\
Enter the option number to change${END}
i.e. 01 to change install device
Leave blank or enter 0 when done"
    read -rp "Option number: " ans

    case "${ans}" in
      ""|"0") unset ans ; break ;;
      "01") export DEV=         ;;
      "02") export CRYPTNAME=   ;;
      "03") export VGNAME=      ;;
      "04") export LVROOTNAME=  ;;
      "05") export LVROOTSIZE=  ;;
      "06") export LVSWAPNAME=  ;;
      "07") export LVSWAPSIZE=  ;;
      "08") export LVHOMENAME=  ;;
      "09") export LVHOMESIZE=  ;;
      "10") export TARGETMOUNTPOINT= ;;
      "11") export NEWHOSTNAME= ;;
      "12") export WANTSSDGRUB= ;;
      *) clear
        echo -e "${RED}Unrecognized option${END}\nDon't forget to include the zero for 01-09"
        sleep 2 ;;
    esac

  done
}

function key_var_check() {
  while : ; do
    clear
    echo -e "${GREEN}\
Please review your keyfile settings${END}
01 - Key device      :  ${KEYDEV}
02 - Key name        :  ${KEYNAME}
03 - Key mountpoint  :  ${KEYMOUNT}
04 - Key directory   :  ${KEYDIR}"
    if [[ "${KEYFORMAT}" -ne 0 ]]; then
      echo -e "\
05 - New filesystem  :  ${KEYFSTYPE}"
    fi

    if [[ "${KEYCHANGE}" -ne 1 ]]; then
      read -rp "Do you wish to change any options? [y/N] " ans
      case "${ans}" in
        "n"|"N"|"") unset ans ; export KEYCHANGE=0 ; break ;;
        "y"|"Y") unset ans ; export KEYCHANGE=1 ; continue ;;
        *) unset ans ; continue ;;
      esac
    fi

    echo -e "${RED}\
Enter the option number to change${END}
i.e. 01 to change key device
Leave blank or enter 0 when done"
    read -rp "Option number: " ans

    case "${ans}" in
      ""|"0") unset ans ; break ;;
      "01") export KEYDEV= ;;
      "02") export KEYNAME= ;;
      "03") export KEYMOUNT= ;;
      "04") export KEYDIR= ;;
      "05") export KEYFSTYPE= ; export KEYFORMAT= ;;
      *) clear
        echo -e "${RED}Unrecognized option${END}\nDon't forget to include the zero for 01-05"
        sleep 2 ;;
    esac

  done
}
